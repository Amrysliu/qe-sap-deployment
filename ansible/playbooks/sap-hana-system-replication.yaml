---
- hosts: hana
  remote_user: cloudadmin
  become: true
  become_user: root
  pre_tasks:
    - name: Detect cloud platform
      ansible.builtin.include_tasks:
        ./tasks/detect-cloud-platform.yaml
    - name: Detection result
      ansible.builtin.debug:
        msg: "Cloud platform appears to be {{ cloud_platform_name }}"
      
  vars:
    install_path: /var/lib/qedep
    hsr_cnf_file: "{{ install_path }}/{{ sap_hana_sid }}_hsr_configured"

  tasks:

  #TODO: Use terraform or ansible to populate the system replication var file - this hardcoded method is not scalable!
  - name: Load AWS system replication vars
    include_vars: ./vars/aws_hana_hsr_parameters.yaml
    when: cloud_platform_is_aws

  - name: Load Azure system replication vars
    include_vars: ./vars/azure_hana_hsr_parameters.yaml
    when: cloud_platform_is_azure

  - name: Check for previous HSR configuration
    ansible.builtin.file:
      path: "{{ hsr_cnf_file }}"
      state: file
    check_mode: yes
    register: hsr_file_check
    changed_when: no
    failed_when: no

  - name: Set install facts
    ansible.builtin.set_fact:
      hsr_configured: "{{ hsr_file_check.state }}"

  - name: Execute hana system replication role
    ansible.builtin.include_role:
      role: ../roles/sap_ha_install_hana_hsr
    when: hsr_configured == 'absent'

  - name: Write status file
    ansible.builtin.file:
      path: "{{ item.path }}"
      state: "{{ item.state }}"
      owner: root
      group: root
      mode: '0700'
    with_items:
     - { 'path': "{{ install_path }}",     'state': 'directory' }
     - { 'path': "{{ hsr_cnf_file }}", 'state': 'touch' }
    when: hsr_configured == 'absent'